{"code":"import { mergeAttributes, Node } from '@tiptap/core';\r\nimport { PluginKey } from '@tiptap/pm/state';\r\nimport Suggestion from '@tiptap/suggestion';\r\nexport const MentionPluginKey = new PluginKey('mention');\r\nexport const Mention = Node.create({\r\n    name: 'mention',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n            renderText({ options, node }) {\r\n                var _a;\r\n                return `${options.suggestion.char}${(_a = node.attrs.label) !== null && _a !== void 0 ? _a : node.attrs.id}`;\r\n            },\r\n            renderHTML({ options, node }) {\r\n                var _a;\r\n                return [\r\n                    'span',\r\n                    this.HTMLAttributes,\r\n                    `${options.suggestion.char}${(_a = node.attrs.label) !== null && _a !== void 0 ? _a : node.attrs.id}`\r\n                ];\r\n            },\r\n            suggestion: {\r\n                char: '@',\r\n                pluginKey: MentionPluginKey,\r\n                command: ({ editor, range, props }) => {\r\n                    var _a, _b;\r\n                    // increase range.to by one when the next node is of type \"text\"\r\n                    // and starts with a space character\r\n                    const nodeAfter = editor.view.state.selection.$to.nodeAfter;\r\n                    const overrideSpace = (_a = nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.text) === null || _a === void 0 ? void 0 : _a.startsWith(' ');\r\n                    if (overrideSpace) {\r\n                        range.to += 1;\r\n                    }\r\n                    editor\r\n                        .chain()\r\n                        .focus()\r\n                        .insertContentAt(range, [\r\n                        {\r\n                            type: this.name,\r\n                            attrs: props,\r\n                        },\r\n                        {\r\n                            type: 'text',\r\n                            text: ' ',\r\n                        },\r\n                    ])\r\n                        .run();\r\n                    (_b = window.getSelection()) === null || _b === void 0 ? void 0 : _b.collapseToEnd();\r\n                },\r\n                allow: ({ state, range }) => {\r\n                    const $from = state.doc.resolve(range.from);\r\n                    const type = state.schema.nodes[this.name];\r\n                    const allow = !!$from.parent.type.contentMatch.matchType(type);\r\n                    return allow;\r\n                },\r\n            },\r\n        };\r\n    },\r\n    group: 'inline',\r\n    inline: true,\r\n    selectable: false,\r\n    atom: true,\r\n    addAttributes() {\r\n        return {\r\n            id: {\r\n                default: null,\r\n                parseHTML: element => element.getAttribute('data-id'),\r\n                renderHTML: attributes => {\r\n                    if (!attributes.id) {\r\n                        return {};\r\n                    }\r\n                    return {\r\n                        'data-id': attributes.id,\r\n                    };\r\n                },\r\n            },\r\n            label: {\r\n                default: null,\r\n                parseHTML: element => element.getAttribute('data-label'),\r\n                renderHTML: attributes => {\r\n                    if (!attributes.label) {\r\n                        return {};\r\n                    }\r\n                    return {\r\n                        'data-label': attributes.label,\r\n                    };\r\n                },\r\n            },\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: `span[data-type=\"${this.name}\"]`,\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ node, HTMLAttributes }) {\r\n        return [\r\n            'span',\r\n            mergeAttributes({ 'data-type': this.name }, this.options.HTMLAttributes, HTMLAttributes),\r\n            this.options.renderHTML({\r\n                options: this.options,\r\n                node,\r\n            }),\r\n        ];\r\n    },\r\n    renderText({ node }) {\r\n        return this.options.renderText({\r\n            options: this.options,\r\n            node,\r\n        });\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            Backspace: () => this.editor.commands.command(({ tr, state }) => {\r\n                let isMention = false;\r\n                const { selection } = state;\r\n                const { empty, anchor } = selection;\r\n                if (!empty) {\r\n                    return false;\r\n                }\r\n                state.doc.nodesBetween(anchor - 1, anchor, (node, pos) => {\r\n                    if (node.type.name === this.name) {\r\n                        isMention = true;\r\n                        tr.insertText(this.options.suggestion.char || '', pos, pos + node.nodeSize);\r\n                        return false;\r\n                    }\r\n                });\r\n                return isMention;\r\n            }),\r\n        };\r\n    },\r\n    addProseMirrorPlugins() {\r\n        return [\r\n            Suggestion({\r\n                editor: this.editor,\r\n                ...this.options.suggestion,\r\n            }),\r\n        ];\r\n    },\r\n});\r\n//# sourceMappingURL=mention.js.map","references":["/Users/rhx/repos/tiptap/packages/core/src/index.ts","/Users/rhx/repos/tiptap/packages/pm/model/index.ts","/Users/rhx/repos/tiptap/packages/pm/state/index.ts","/Users/rhx/repos/tiptap/packages/suggestion/src/index.ts"],"map":"{\"version\":3,\"file\":\"mention.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/mention.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/rhx/repos/tiptap/packages/extension-mention/node_modules/.cache/rollup-plugin-typescript2/placeholder/packages/extension-mention/src/mention.d.ts","writeByteOrderMark":false,"text":"import { Node } from '@tiptap/core';\r\nimport { DOMOutputSpec, Node as ProseMirrorNode } from '@tiptap/pm/model';\r\nimport { PluginKey } from '@tiptap/pm/state';\r\nimport { SuggestionOptions } from '@tiptap/suggestion';\r\nexport type MentionOptions = {\r\n    HTMLAttributes: Record<string, any>;\r\n    renderText: (props: {\r\n        options: MentionOptions;\r\n        node: ProseMirrorNode;\r\n    }) => string;\r\n    renderHTML: (props: {\r\n        options: MentionOptions;\r\n        node: ProseMirrorNode;\r\n    }) => DOMOutputSpec;\r\n    suggestion: Omit<SuggestionOptions, 'editor'>;\r\n};\r\nexport declare const MentionPluginKey: PluginKey<any>;\r\nexport declare const Mention: Node<MentionOptions, any>;\r\n"}}
